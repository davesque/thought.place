@mixin clearfix {
  &:after {
    content: ".";
    display: block;
    height: 0;
    clear: both;
    visibility: hidden;
  }
}

@mixin transitions($args) {
  transition: $args;
  -o-transition: $args;
  -ms-transition: $args;
  -moz-transition: $args;
  -webkit-transition: $args;
}

@mixin rounded($radius) {
  border-radius: $radius;
  -o-border-radius: $radius;
  -ms-border-radius: $radius;
  -moz-border-radius: $radius;
  -webkit-border-radius: $radius;
}

@mixin shadow($color: rgba(0,0,0,.3), $left: 0px, $top: 0px, $blur: 10px) {
  box-shadow: $left $top $blur $color;
  -o-box-shadow: $left $top $blur $color;
  -ms-box-shadow: $left $top $blur $color;
  -moz-box-shadow: $left $top $blur $color;
  -webkit-box-shadow: $left $top $blur $color;
}

@mixin text-shadow($color: #000000, $left: 0px, $top: 0px, $blur: 8px) {
  text-shadow: $left $top $blur $color;
  -o-text-shadow: $left $top $blur $color;
  -ms-text-shadow: $left $top $blur $color;
  -moz-text-shadow: $left $top $blur $color;
  -webkit-text-shadow: $left $top $blur $color;
}

@mixin outset { text-shadow: 0px -1px #fff; }

// A simplified version of the mixin found here:
// https://github.com/ry5n/rem
//
// Inserts a property declaration with rem values and a fallback declaration
// with values relative to $base.
@mixin rem-fallback($property, $values, $base: 16px) {
  // Force $values to be list
  @if type-of($values) != list {
    $values: append((), $values, space);
  }

  $fallback-values: ();
  $rem-values: ();

  @each $value in $values {
    @if type-of($value) == number and unit($value) == rem {
      $fallback-values: append($fallback-values, $value / 1rem * $base, space);
      $rem-values: append($rem-values, $value, space);
    } @else {
      $fallback-values: append($fallback-values, $value, space);
      $rem-values: append($rem-values, $value, space);
    }
  }

  #{$property}: $fallback-values;
  #{$property}: $rem-values;
}

// Converts any rem units in $values into units relative to $base.
@function rem-convert($values, $base: 16px) {
  // Force $values to be list
  @if type-of($values) != list {
    $values: append((), $values, space);
  }

  // Convert values relative to base
  $new-values: ();

  @each $value in $values {
    @if type-of($value) == number and unit($value) == rem {
      $new-values: append($new-values, round($value / 1rem * $base), space);
    } @else {
      $new-values: append($new-values, $value, space);
    }
  }

  @return $new-values;
}
